// Generated by CoffeeScript 1.6.3
(function() {
  define(["jquery", "d3", "utils", "pubsub", "common"], function($, d3, utils, PubSub, common) {
    var current_year, last_mouse_x, mouseenter, mouseleave, move_circles, popup, popup_position, popup_width, svg;
    move_circles = function(sel) {
      return sel.attr("transform", function(prenom_data) {
        var x_pos, y_pos;
        x_pos = utils.axis.x(current_year);
        y_pos = utils.axis.y(prenom_data.years[current_year - utils.years[0]]);
        return "translate(" + x_pos + " " + y_pos + ")";
      });
    };
    PubSub.subscribe("prenom:remove", function() {
      if (utils.prenoms_selection.length <= 1) {
        return popup.transition().attr("opacity", 0);
      }
    });
    PubSub.subscribe("axis:y:update", function() {
      return svg.select("#circles").selectAll(".circle").transition().duration(utils.duration).call(move_circles);
    });
    popup_width = 300;
    svg = d3.select("svg");
    popup = svg.select("#popup").attr("opacity", 0);
    popup.append("rect").attr("class", "bg").attr("width", popup_width).attr("height", 150);
    popup.append("text").attr("class", "year").attr("x", 10).attr("y", 27);
    mouseenter = function() {
      if (utils.prenoms_selection.length) {
        popup.transition().attr("opacity", 1);
        return svg.selectAll("#circles .circle").transition().attr("opacity", 1);
      }
    };
    mouseleave = function() {
      popup.transition().attr("opacity", 0);
      return svg.selectAll("#circles .circle").transition().attr("opacity", 0);
    };
    popup_position = null;
    last_mouse_x = -1;
    current_year = utils.years[0];
    svg.on("mouseenter", mouseenter).on("mouseleave", mouseleave).on("mousemove", function() {
      var change_pos, mouse_x, mouse_y, prenom_summaries, x_translations, _ref;
      _ref = d3.mouse(this), mouse_x = _ref[0], mouse_y = _ref[1];
      if (mouse_y > utils.axis.y.range()[0]) {
        mouseleave();
        return;
      }
      mouseenter();
      current_year = parseInt(utils.axis.x.invert(mouse_x));
      current_year = common.constrain(current_year, utils.axis.x.domain()[0], utils.axis.x.domain()[1]);
      popup.select(".year").text("" + current_year);
      x_translations = [utils.axis.x.range()[0] + 20, utils.axis.x.range()[1] - popup_width - 20];
      change_pos = function(pos) {
        popup_position = pos;
        return popup.attr("transform", "translate(" + x_translations[popup_position] + " " + (utils.axis.y.range()[1] + 20) + ")");
      };
      if (popup_position === null || (popup_position === 1 && (mouse_x - last_mouse_x > 0) && mouse_x > x_translations[1] - 30)) {
        change_pos(0);
      } else if (popup_position === 0 && (mouse_x - last_mouse_x < 0) && mouse_x < x_translations[0] + popup_width + 30) {
        change_pos(1);
      }
      last_mouse_x = mouse_x;
      svg.select("#circles").selectAll(".circle").call(move_circles);
      prenom_summaries = popup.selectAll("g.prenom_summary");
      prenom_summaries.select("text.prenom").text(function(prenom_data) {
        return prenom_data.prenom_sexued;
      });
      return prenom_summaries.select("text.naissances").text(function(prenom_data) {
        var c;
        c = prenom_data.years[current_year - utils.years[0]];
        if (c === 0) {
          return "aucune naissance";
        } else {
          return c + " naissance" + (c > 1 ? "s" : "");
        }
      });
    });
    popup.update = function() {
      var circles, content, margin_y, new_circles, new_prenom_summaries, prenom_summaries, prenom_summary_height, prenom_summary_width, total_height, y_text_offset;
      prenom_summaries = popup.selectAll("g.prenom_summary").data(utils.prenoms_selection, function(d) {
        return d.unique_id;
      });
      prenom_summaries.exit().remove();
      new_prenom_summaries = prenom_summaries.enter().append("g").classed("prenom_summary", true);
      content = new_prenom_summaries.append("g");
      prenom_summary_height = 25;
      prenom_summary_width = popup_width - 20;
      content.append("rect").attr("class", "bg").attr("x", 0).attr("y", 0).attr("width", prenom_summary_width).attr("height", prenom_summary_height);
      content.append("circle").attr("fill", utils.prenom_color_scale).attr("cx", prenom_summary_height / 2).attr("cy", prenom_summary_height / 2).attr("r", 4);
      y_text_offset = prenom_summary_height - 8;
      content.append("text").classed("prenom", true).attr("y", y_text_offset).attr("x", 25).text(function(p) {
        return p.prenom;
      });
      content.append("text").classed("naissances", true).attr("y", y_text_offset).attr("x", prenom_summary_width - 10).attr("text-anchor", "end");
      margin_y = 1;
      total_height = prenom_summary_height + margin_y;
      prenom_summaries.attr("transform", function(d, i) {
        return "translate(10 " + ((i + 1) * total_height + 10) + ")";
      });
      popup.select("* > rect.bg").attr("height", (utils.prenoms_selection.length - 1) * total_height + 75);
      circles = svg.select("#circles").selectAll(".circle").data(utils.prenoms_selection, function(d) {
        return d.unique_id;
      });
      circles.exit().remove();
      new_circles = circles.enter().append("g").attr("class", "circle").attr("opacity", 0).attr("transform", "");
      new_circles.append("circle").attr("cx", 0).attr("cy", 0).attr("r", 7).attr("fill", utils.prenom_color_scale);
      new_circles.append("circle").attr("cx", 0).attr("cy", 0).attr("r", 5).attr("fill", "white");
      return new_circles.append("circle").attr("cx", 0).attr("cy", 0).attr("r", 4).attr("fill", utils.prenom_color_scale);
    };
    return popup;
  });

}).call(this);
