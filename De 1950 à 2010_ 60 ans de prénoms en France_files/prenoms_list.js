// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(["jquery", "d3", "prenoms_dataset", "utils", "pubsub", "common"], function($, d3, prenoms_dataset, utils, PubSub) {
    var generate_prenoms_list_drawer;
    generate_prenoms_list_drawer = function() {
      var add_remove, prenoms_lis, update_class_for_prenom;
      update_class_for_prenom = function(years) {
        var max_prenom;
        max_prenom = utils.max_for_prenoms(prenoms_dataset, years) / 2;
        return function(sel) {
          return sel.each(function(prenom_data) {
            var font_size, i, level, line_height, prenom_data_max, sizes, _ref;
            prenom_data_max = utils.max_for_prenoms([prenom_data], years);
            i = prenom_data_max / max_prenom;
            level = i > 1 ? 4 : i > 0.8 ? 3 : i > 0.5 ? 2 : i > 0.3 ? 1 : 0;
            sizes = [[0.9, 1], [1.2, 0.7], [1.7, 0.625], [2.0, 0.55], [2.5, 0.47]];
            _ref = sizes[level], font_size = _ref[0], line_height = _ref[1];
            return d3.select(this).style("line-height", line_height).style("font-size", font_size * 17 + "px");
          });
        };
      };
      d3.select("#prenoms_list_container .loading").remove();
      prenoms_lis = d3.select("#prenoms_list_container ul").selectAll("li").data(prenoms_dataset).enter().append("li").attr("class", function(prenom_data) {
        return prenom_data.sexe;
      }).call(update_class_for_prenom(utils.years)).text(function(d) {
        return d.prenom;
      }).attr("title", function(prenom_data) {
        if (prenom_data.alt != null) {
          return "autres orthographes: " + prenom_data.alt.join(", ");
        }
      }).on("click", function(prenom_data) {
        var selected;
        selected = d3.select(this).classed("selected");
        PubSub.publish("prenom:" + (selected ? "remove" : "add"), prenom_data);
        return false;
      });
      $("#prenoms_list_container ul li").after(" ");
      add_remove = function(msg, prenom_data) {
        var sel;
        sel = prenoms_lis.filter(function(d) {
          return d === prenom_data;
        });
        if (msg === "prenom:add") {
          return sel.style("background-color", utils.prenom_color_scale).classed("selected", true);
        } else {
          return sel.style("background-color", "").classed("selected", false);
        }
      };
      PubSub.subscribe("prenom:remove", add_remove);
      PubSub.subscribe("prenom:add", add_remove);
      PubSub.subscribe("prenom:sort", function(msg, range) {
        var sum_for_prenom, years, _i, _ref, _ref1, _results;
        years = (function() {
          _results = [];
          for (var _i = _ref = range[0], _ref1 = range[1]; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        sum_for_prenom = function(p) {
          var count, counts, i;
          counts = (function() {
            var _j, _len, _ref2, _ref3, _results1;
            _ref2 = p.years;
            _results1 = [];
            for (i = _j = 0, _len = _ref2.length; _j < _len; i = ++_j) {
              count = _ref2[i];
              if (_ref3 = i + utils.years[0], __indexOf.call(years, _ref3) >= 0) {
                _results1.push(count);
              }
            }
            return _results1;
          })();
          return d3.sum(counts);
        };
        return prenoms_lis.sort(function(prenom_data1, prenom_data2) {
          var a, b;
          a = sum_for_prenom(prenom_data1);
          b = sum_for_prenom(prenom_data2);
          if (b < a) {
            return -1;
          } else if (b > a) {
            return 1;
          } else {
            return 0;
          }
        });
      });
      return PubSub.subscribe("year_range_update", function(msg, range) {
        var years, _i, _ref, _ref1, _results;
        years = (function() {
          _results = [];
          for (var _i = _ref = range[0], _ref1 = range[1]; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        return prenoms_lis.call(update_class_for_prenom(years));
      });
    };
    return generate_prenoms_list_drawer;
  });

}).call(this);
